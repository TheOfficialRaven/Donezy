// NotesRenderer.js - Jegyzetek UI, titkos√≠t√°s, modalok
window.NotesRenderer = (function() {
    'use strict';

    let currentOpenNote = null;

    function renderNotesTab(notes) {
        renderNotesHeader();
        renderNotesList(notes);
        setupNotesEventListeners();
    }

    function renderNotesHeader() {
        const header = document.getElementById('notes-header');
        if (!header) return;
        header.innerHTML = `
            <div class="flex items-center justify-between mb-8">
                <h2 class="text-3xl font-bold text-donezy-orange flex items-center gap-2">üìù Jegyzetek</h2>
                <button id="open-create-note-modal" class="bg-donezy-orange hover:bg-orange-600 text-white font-bold py-2 px-6 rounded-lg shadow-lg transition-colors duration-200 text-lg">√öj jegyzet</button>
            </div>
        `;
    }

    function renderNotesList(notes) {
        const list = document.getElementById('notes-list');
        if (!list) return;
        const notesArr = Object.values(notes).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        if (notesArr.length === 0) {
            list.innerHTML = `<div class="text-center py-12 text-gray-400">Nincs m√©g jegyzeted.</div>`;
            return;
        }
        list.innerHTML = `
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10">
                ${notesArr.map(note => renderNoteCard(note)).join('')}
            </div>
        `;
    }

    function renderNoteCard(note) {
        const isEncrypted = note.isEncrypted;
        const isPinned = note.pinned;
        
        if (isEncrypted) {
            return `
                <div class="card note-card flex flex-col min-h-[220px] relative ${isPinned ? 'ring-2 ring-donezy-orange' : ''}">
                    <div class="card-header flex items-center gap-2 mb-3">
                        <span class="text-2xl">üîí</span>
                        <span class="card-title">${note.title}</span>
                        ${isPinned ? '<span class="text-donezy-orange text-sm">üìç</span>' : ''}
                    </div>
                    <div class="note-card-encrypted-overlay absolute inset-0 flex flex-col items-center justify-center rounded-lg z-10 animate-fade-in" style="background:rgba(0,0,0,0.40);backdrop-filter:blur(4px);">
                        <div class="text-5xl mb-2 animate-bounce">üîí</div>
                        <div class="text-lg font-bold text-donezy-orange mb-1">V√©dett tartalom</div>
                        <div class="text-xs font-semibold bg-donezy-accent text-donezy-orange px-3 py-1 rounded-full mb-2 tracking-wide shadow">Titkos√≠tott jegyzet</div>
                        <div class="text-sm text-donezy-text-secondary mb-4">Jelsz√≥ sz√ºks√©ges a megtekint√©shez</div>
                        <button class="note-unlock-btn btn btn-primary" data-note-id="${note.id}">Jelsz√≥ megad√°sa</button>
                    </div>
                </div>
            `;
        } else {
            return `
                <div class="card note-card flex flex-col min-h-[220px] relative ${isPinned ? 'ring-2 ring-donezy-orange' : ''}">
                    <div class="card-header flex items-center gap-2 mb-3">
                        <span class="text-2xl">üìù</span>
                        <span class="card-title">${note.title}</span>
                        ${isPinned ? '<span class="text-donezy-orange text-sm">üìç</span>' : ''}
                        ${note.tags ? `<span class='ml-2 px-2 py-1 rounded bg-donezy-accent text-xs text-donezy-orange'>${note.tags}</span>` : ''}
                    </div>
                    <div class="card-body flex-1 text-donezy-text-secondary">${note.content}</div>
                    <div class="card-footer flex items-center gap-2 mt-auto pt-4">
                        <button class="note-pin-btn btn btn-ghost text-donezy-orange" title="${isPinned ? 'Kit≈±z√©s felold√°sa' : 'Kit≈±z√©s'}" data-note-id="${note.id}">${isPinned ? 'üìç' : 'üìå'}</button>
                        <button class="note-edit-btn btn btn-ghost text-donezy-orange" title="Szerkeszt√©s" data-note-id="${note.id}">‚úèÔ∏è</button>
                        <button class="note-delete-btn btn btn-ghost text-red-400 hover:text-red-600" title="T√∂rl√©s" data-note-id="${note.id}">üóëÔ∏è</button>
                        <span class="ml-auto text-xs text-donezy-text-secondary">${new Date(note.createdAt).toLocaleString('hu-HU')}</span>
                    </div>
                </div>
            `;
        }
    }

    function showNoteModal(note) {
        currentOpenNote = note;
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        modal.id = 'note-modal';
        let contentHtml = '';
        if (note.isEncrypted) {
            contentHtml = `
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Jelsz√≥ a jegyzet felold√°s√°hoz</label>
                    <input type="password" id="decrypt-password" class="w-full bg-donezy-accent border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-donezy-orange" placeholder="Jelsz√≥...">
                    <div id="decrypt-error" class="text-red-400 text-sm mt-2"></div>
                </div>
                <button id="decrypt-note-btn" class="w-full bg-donezy-orange hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 mb-2">Felold√°s</button>
            `;
        } else {
            contentHtml = `<div class="whitespace-pre-line text-gray-200">${note.content}</div>`;
        }
        modal.innerHTML = `
            <div class="bg-donezy-card rounded-lg p-6 shadow-lg border border-donezy-accent max-w-lg w-full mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold text-donezy-orange">üìù ${note.title}</h3>
                    <button id="close-note-modal" class="text-gray-400 hover:text-white text-2xl">&times;</button>
                </div>
                ${contentHtml}
            </div>
        `;
        document.body.appendChild(modal);
        document.getElementById('close-note-modal').addEventListener('click', closeNoteModal);
        if (note.isEncrypted) {
            document.getElementById('decrypt-note-btn').addEventListener('click', tryDecryptNote);
        }
    }

    function closeNoteModal() {
        const modal = document.getElementById('note-modal');
        if (modal) modal.remove();
        currentOpenNote = null;
    }

    async function tryDecryptNote() {
        const password = document.getElementById('decrypt-password').value;
        const errorDiv = document.getElementById('decrypt-error');
        if (!password) {
            errorDiv.textContent = 'K√©rlek, adj meg egy jelsz√≥t!';
            return;
        }
        const decrypted = window.NotesService.decryptNoteContent(currentOpenNote.content, password);
        if (!decrypted) {
            errorDiv.textContent = 'Hib√°s jelsz√≥ vagy s√©r√ºlt jegyzet!';
            return;
        }
        // Megjelen√≠tj√ºk a tartalmat szerkeszt√©s/t√∂rl√©s gombokkal
        errorDiv.textContent = '';
        const modal = document.getElementById('note-modal');
        if (modal) {
            modal.querySelector('.bg-donezy-card').innerHTML = `
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold text-donezy-orange">üìù ${currentOpenNote.title}</h3>
                    <button id="close-note-modal" class="text-gray-400 hover:text-white text-2xl">&times;</button>
                </div>
                <div class="whitespace-pre-line text-gray-200 mb-4">${decrypted}</div>
                <div class="flex gap-2 mt-2">
                    <button id="edit-note-btn" class="btn btn-ghost text-donezy-orange">‚úèÔ∏è Szerkeszt√©s</button>
                    <button id="delete-note-btn" class="btn btn-ghost text-red-400 hover:text-red-600">üóëÔ∏è T√∂rl√©s</button>
                </div>
            `;
            document.getElementById('close-note-modal').addEventListener('click', closeNoteModal);
            document.getElementById('delete-note-btn').addEventListener('click', async () => {
                await window.NotesService.deleteNote(currentOpenNote.id);
                closeNoteModal();
                window.NotesRenderer.refreshNotesDisplay();
            });
            document.getElementById('edit-note-btn').addEventListener('click', () => {
                alert('A szerkeszt√©s funkci√≥ hamarosan el√©rhet≈ë!');
                // Itt lehet majd szerkeszt≈ë modalt nyitni, ha implement√°lva lesz
            });
        }
    }

    // Jegyzet hozz√°ad√°s modal
    function showCreateNoteModal() {
        if (!window.ModalService) return alert('A modal szolg√°ltat√°s nem el√©rhet≈ë!');
        const modalId = window.ModalService.showModal({
            title: '√öj jegyzet',
            icon: 'üìù',
            fields: [
                { type: 'text', id: 'modal-note-title', label: 'C√≠m', placeholder: 'pl. G√©p jelszavak', required: true },
                { type: 'textarea', id: 'modal-note-content', label: 'Tartalom', placeholder: '√çrd ide a jegyzetedet...', rows: 6, required: true },
                { type: 'checkbox', id: 'modal-note-encrypt', label: 'üîí Titkos√≠tott jegyzet', required: false },
                { type: 'password', id: 'modal-note-password', label: 'Jelsz√≥ a titkos√≠t√°shoz', placeholder: 'Jelsz√≥...', required: false, style: 'display:none;' }
            ],
            buttons: [
                {
                    text: 'L√©trehoz√°s',
                    type: 'primary',
                    id: 'create-note-modal-btn',
                    action: async (data, modalId) => {
                        const isEncrypted = data['modal-note-encrypt'] === true;
                        let password = '';
                        
                        if (isEncrypted) {
                            password = data['modal-note-password'];
                            if (!password || password.trim() === '') {
                                alert('A titkos√≠tott jegyzethez k√∂telez≈ë a jelsz√≥!');
                                return;
                            }
                        }
                        
                        const success = await window.NotesService.createNote(
                            data['modal-note-title'], 
                            data['modal-note-content'], 
                            isEncrypted, 
                            password
                        );
                        
                        if (success) {
                            window.ModalService.closeModal(modalId);
                            window.NotesRenderer.refreshNotesDisplay();
                        } else {
                            alert('Hiba t√∂rt√©nt a jegyzet l√©trehoz√°sakor!');
                        }
                    }
                },
                {
                    text: 'M√©gse',
                    type: 'secondary',
                    id: 'cancel-note-modal-btn',
                    action: (data, modalId) => {
                        window.ModalService.closeModal(modalId);
                    }
                }
            ]
        });
        // Dinamikus jelsz√≥ input megjelen√≠t√©s
        setTimeout(() => {
            const encryptCheckbox = document.getElementById('modal-note-encrypt');
            const passwordField = document.getElementById('modal-note-password');
            const passwordFieldContainer = passwordField?.parentElement;
            
            if (encryptCheckbox && passwordFieldContainer) {
                // Kezdeti √°llapot be√°ll√≠t√°sa
                passwordFieldContainer.style.display = encryptCheckbox.checked ? '' : 'none';
                passwordField.required = encryptCheckbox.checked;
                
                // Event listener a checkbox v√°ltoz√°s√°hoz
                encryptCheckbox.addEventListener('change', () => {
                    passwordFieldContainer.style.display = encryptCheckbox.checked ? '' : 'none';
                    passwordField.required = encryptCheckbox.checked;
                    
                    // Ha kikapcsoljuk a titkos√≠t√°st, t√∂r√∂lj√ºk a jelsz√≥ mez≈ët
                    if (!encryptCheckbox.checked) {
                        passwordField.value = '';
                    }
                });
            }
        }, 100);
    }

    function setupNotesEventListeners() {
        // √öj jegyzet modal gomb
        document.getElementById('open-create-note-modal')?.addEventListener('click', showCreateNoteModal);
        // Jegyzet t√∂rl√©s
        document.querySelectorAll('.note-delete-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const noteId = btn.getAttribute('data-note-id');
                await window.NotesService.deleteNote(noteId);
                refreshNotesDisplay();
            });
        });
        // Jegyzet szerkeszt√©s (TODO: implement√°lhat√≥ k√©s≈ëbb)
        document.querySelectorAll('.note-edit-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                alert('A szerkeszt√©s funkci√≥ hamarosan el√©rhet≈ë!');
            });
        });
        // Jegyzet kit≈±z√©s (TODO: implement√°lhat√≥ k√©s≈ëbb)
        document.querySelectorAll('.note-pin-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const noteId = btn.getAttribute('data-note-id');
                const success = await window.NotesService.toggleNotePin(noteId);
                if (success) {
                    refreshNotesDisplay();
                    // Pin ikon friss√≠t√©se
                    const note = window.NotesService.getNote(noteId);
                    if (note) {
                        btn.textContent = note.pinned ? 'üìç' : 'üìå';
                        btn.title = note.pinned ? 'Kit≈±z√©s felold√°sa' : 'Kit≈±z√©s';
                    }
                }
            });
        });
        // Jegyzet megnyit√°s (csak titkos√≠tott)
        document.querySelectorAll('.note-unlock-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const noteId = btn.getAttribute('data-note-id');
                const note = window.NotesService.getNote(noteId);
                if (note) showNoteModal(note);
            });
        });
    }

    function refreshNotesDisplay() {
        if (window.NotesService) {
            const notes = window.NotesService.getAllNotes();
            renderNotesList(notes);
            setupNotesEventListeners();
        }
    }

    // Public API
    return {
        renderNotesTab,
        refreshNotesDisplay
    };
})(); 